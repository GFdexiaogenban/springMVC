## 1-跳转

将`springmvc-servlet.jsp`中的`ViewResolver`注释掉

建立`ModelTest1`

```java
@Controller
public class ModelTest1 {

    @RequestMapping("/m1/t1")
    public String test1() {
        //转发
        return "/WEB-INF/jsp/test.jsp";
    }

    @RequestMapping("/m1/t2")
    public String test2() {
        //转发二
        return "forward:/WEB-INF/jsp/test.jsp";
    }

    @RequestMapping("/m1/t3")
    public String test3() {
        //重定向
        return "redirect:/WEB-INF/jsp/test.jsp";
    }
}
```

实现的转发和重定向，前两个为转发，最后一个为重定向

后两种都不会通过视图解析器，第一种默认通过视图解析器，没有视图解析器的话，就直接为路径

## 2-数据处理

### 2.1-处理提交数据

1. 提交的域名称和处理方法的参数名一致

   提交数据 : `http://localhost:8080/hello?name=ckj`

   处理方法

   ```java
   @RequestMapping("/hello")
   public String hello(String name){
   	System.out.println(name);
   	return "hello";
   }
   ```

   后台输出 : `ckj`

2. 提交的域名称和处理方法的参数名不一致

   是用`@RequestParam`

   提交数据 : `http://localhost:8080/hello?username=ckj`

   ```java
   //@RequestParam("username") : username提交的域的名称 .
   @RequestMapping("/hello")
   public String hello(@RequestParam("username") String name){
   	System.out.println(name);
   	return "hello";
   }
   ```

   后台输出 : `ckj`

3. 提交的是一个对象

   要求提交的表单域和对象的属性名一致  , 参数使用对象即可

   ```java
   public class User {
   	private int id;
   	private String name;
   	private int age;
   	//构造
   	//get/set
   	//tostring()
   }
   ```

   提交数据`http://localhost:8080/mvc04/user?name=ckj&id=1&age=21`

   处理方法：

   ```java
   @RequestMapping("/user")
   public String user(User user){
   	System.out.println(user);
   	return "hello";
   }
   ```

   后台输出 : `User { id=1, name='ckj', age=21 }`

   解析：

   接收前端用户传递的参数，判断参数的名字，假设名字直接在方法上，可以直接使用

   假设传递的时一个对象`User`，匹配`User`对象中的字段名，如果名字一致则OK，否则，匹配不到，类似于`mybaits`中的`resulttyoe="user"`

### 2.2-数据显示到前端

#### 2.2.1-ModelAndView

参考 [2-Hello.md](2-Hello.md) 

```java
public class ModelTest1 implements Controller {
    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {
        //返回一个模型视图对象
        ModelAndView mv = new ModelAndView();
        mv.addObject("msg", "ControllerTest1");
        mv.setViewName("test");
        return mv;
    }
}
```

#### 2.2.2-ModelMap

```java
@RequestMapping("/m1/test1")
public String hello(@RequestParam("username") String name, ModelMap model) {
    //封装要显示到视图中的数据
    //相当于req.setAttribute("name",name);
    model.addAttribute("name", name);
    System.out.println(name);
    return "hello";
}
```

#### 2.2.3-Model

参考 [2-Hello.md](2-Hello.md) 中的  `4-注解配置`

```java
@RequestMapping("/m1/test2")
public String hello(@RequestParam("username") String name, Model model) {
    //封装要显示到视图中的数据
    //相当于req.setAttribute("name",name);
    model.addAttribute("msg", name);
    System.out.println(name);
    return "test";
}
```

#### 2.2.4-对比

- Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解
- ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性
- ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转

## 3-乱码问题

### 3.1-xml

`SpringMVC`给我们提供了一个过滤器 , 可以在`web.xml`中配置

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```

但有些极端情况下，这个过滤器对`get`的支持不好

### 3.2-Tomcat

`tomcat-9.0.43\conf\server.xml`

```xml
<Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" 
               URIEncoding="utf-8"/>
```

### 3.3-设置过滤器

```java
package com.ckj.filter;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Map;

/**
 * 解决get和post请求 全部乱码的过滤器
 */
public class GenericEncodingFilter implements Filter {
    @Override
    public void destroy() {
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        //处理response的字符编码
        HttpServletResponse myResponse = (HttpServletResponse) response;
        myResponse.setContentType("text/html;charset=UTF-8");

        // 转型为与协议相关对象
        HttpServletRequest httpServletRequest = (HttpServletRequest) request;
        // 对request包装增强
        HttpServletRequest myrequest = new MyRequest(httpServletRequest);
        chain.doFilter(myrequest, response);
    }

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }

}

//自定义request对象，HttpServletRequest的包装类
class MyRequest extends HttpServletRequestWrapper {

    private HttpServletRequest request;
    //是否编码的标记
    private boolean hasEncode;

    //定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰
    public MyRequest(HttpServletRequest request) {
        super(request);// super必须写
        this.request = request;
    }

    // 对需要增强方法 进行覆盖
    @Override
    public Map getParameterMap() {
        // 先获得请求方式
        String method = request.getMethod();
        if (method.equalsIgnoreCase("post")) {
            // post请求
            try {
                // 处理post乱码
                request.setCharacterEncoding("utf-8");
                return request.getParameterMap();
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        } else if (method.equalsIgnoreCase("get")) {
            // get请求
            Map<String, String[]> parameterMap = request.getParameterMap();
            if (!hasEncode) { // 确保get手动编码逻辑只运行一次
                for (String parameterName : parameterMap.keySet()) {
                    String[] values = parameterMap.get(parameterName);
                    if (values != null) {
                        for (int i = 0; i < values.length; i++) {
                            try {
                                // 处理get乱码
                                values[i] = new String(values[i]
                                        .getBytes("ISO-8859-1"), "utf-8");
                            } catch (UnsupportedEncodingException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
                hasEncode = true;
            }
            return parameterMap;
        }
        return super.getParameterMap();
    }

    //取一个值
    @Override
    public String getParameter(String name) {
        Map<String, String[]> parameterMap = getParameterMap();
        String[] values = parameterMap.get(name);
        if (values == null) {
            return null;
        }
        return values[0]; // 取回参数的第一个值
    }

    //取所有值
    @Override
    public String[] getParameterValues(String name) {
        Map<String, String[]> parameterMap = getParameterMap();
        String[] values = parameterMap.get(name);
        return values;
    }
}
```

在`web.xml`中配置该过滤器

```xml
<filter>
    <filter-name>encoding</filter-name>
    <filter-class>com.ckj.filter.GenericEncodingFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```

### 3.4-注解设置

#### 3.4.1-单独更改

```java
@RequestMapping(value = "/json1",produces = "application/json;charset=utf-8")
```

在`RequestMapping`注解中，有一个属性为`produces`，对其注入`application/json;charset=utf-8`，就能解决乱码

#### 3.4.2-统一设置

在`springmvc-servlet.xml`中，设置`<mvc:annotation-driven>`

```xml
<mvc:annotation-driven>
    <mvc:message-converters register-defaults="true">
        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
            <constructor-arg value="UTF-8" />
        </bean>
        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
            <property name="objectMapper">
                <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                    <property name="failOnEmptyBeans" value="false" />
                </bean>
            </property>
        </bean>
    </mvc:message-converters>
</mvc:annotation-driven>
```
